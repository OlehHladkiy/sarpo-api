{"version":3,"sources":["../src/index.ts"],"names":["appName","appConfig","name","port","serverConfig","ObjectId","mongoose","Types","prototype","valueOf","toString","LoggerService","initializeLogger","connect","mongoConfig","uri","connectionOptions","schema","typeDefs","resolvers","middlewares","permissions","apiMiddlewares","server","GraphQLServer","context","ctx","user","organization","encodedToken","request","get","AuthController","getUserByAuthToken","err","express","start"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,OAAO,GAAGC,mBAAUC,IAA1B;AACA,MAAMC,IAAI,GAAGC,sBAAaD,IAA1B;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAeC,kBAASC,KAA9B;;AAEAF,QAAQ,CAACG,SAAT,CAAmBC,OAAnB,GAA6B,YAAW;AACtC,SAAO,KAAKC,QAAL,EAAP;AACD,CAFD;;AAIAC,gBAAcC,gBAAd;;AAEA,CAAC,YAAY;AACX,QAAMN,kBAASO,OAAT,CAAiBC,qBAAYC,GAA7B,EAAkCD,qBAAYE,iBAA9C,CAAN;AACD,CAFD;;AAIA,MAAMC,MAAW,GAAG,wCAAqB;AACvCC,EAAAA,QAAQ,EAARA,eADuC;AAEvCC,EAAAA,SAAS,EAATA;AAFuC,CAArB,CAApB;AAKA,MAAMC,WAAW,GAAG,CAACC,wBAAD,EAAcC,sBAAd,CAApB;AAEA,MAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAkB;AAC/BP,EAAAA,MAD+B;AAE/BG,EAAAA,WAF+B;AAG/BK,EAAAA,OAAO,EAAE,MAAOC,GAAP,IAAwB;AAC/B,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,YAAY,GAAG,IAAnB;;AAEA,QAAI;AACF,YAAMC,YAAY,GAAGH,GAAG,CAACI,OAAJ,CAAYC,GAAZ,CAAgB,eAAhB,CAArB;AACAJ,MAAAA,IAAI,GAAG,MAAMK,cAAeC,kBAAf,CAAkCJ,YAAlC,CAAb;AACD,KAHD,CAGE,OAAOK,GAAP,EAAY;AACZ,UAAI,CAACP,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,UAAI,CAACC,YAAL,EAAmB;AACjBA,QAAAA,YAAY,GAAG,IAAf;AACD;AACF;;AAED,6BAAYF,GAAZ;AAAiBC,MAAAA;AAAjB;AACD;AApB8B,CAAlB,CAAf;AAuBA,uCAAsBJ,MAAM,CAACY,OAA7B;AAEAZ,MAAM,CAACa,KAAP,CAAahC,qBAAb,EAA2B,MACzB,mBAAM,GAAEJ,OAAQ,yBAAwBG,IAAK,EAA7C,CADF","sourcesContent":["import { makeExecutableSchema } from 'graphql-tools';\nimport { GraphQLServer } from 'graphql-yoga';\nimport mongoose from 'mongoose';\nimport { info } from 'winston';\n\nimport serverConfig from '@config/serverConfig';\nimport mongoConfig from '@config/mongoConfig';\nimport appConfig from '@config/appConfig';\nimport AuthController from '@modules/auth/auth.controller';\nimport { permissions } from '@modules/permissions';\nimport LoggerService from '@services/logger';\nimport { Context } from '@types';\nimport { middlewares as apiMiddlewares, resolvers } from './resolvers';\nimport { registerRestEndpoints } from './rest-routes';\nimport typeDefs from './schema';\n\nconst appName = appConfig.name;\nconst port = serverConfig.port;\nconst { ObjectId } = mongoose.Types;\n\nObjectId.prototype.valueOf = function() {\n  return this.toString();\n};\n\nLoggerService.initializeLogger();\n\n(async () => {\n  await mongoose.connect(mongoConfig.uri, mongoConfig.connectionOptions);\n})();\n\nconst schema: any = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nconst middlewares = [permissions, apiMiddlewares];\n\nconst server = new GraphQLServer({\n  schema,\n  middlewares,\n  context: async (ctx: Context) => {\n    let user = null;\n    let organization = null;\n\n    try {\n      const encodedToken = ctx.request.get('Authorization');\n      user = await AuthController.getUserByAuthToken(encodedToken);\n    } catch (err) {\n      if (!user) {\n        user = null;\n      }\n      if (!organization) {\n        organization = null;\n      }\n    }\n\n    return { ...ctx, user };\n  },\n});\n\nregisterRestEndpoints(server.express);\n\nserver.start(serverConfig, () =>\n  info(`${appName} (GraphQL) running on ${port}`),\n);\n"],"file":"index.js"}