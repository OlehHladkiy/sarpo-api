{"version":3,"sources":["../../../src/modules/auth/auth.controller.ts"],"names":["AuthController","user","authConfig","jwtSecret","email","name","password","userByEmail","User","find","error","Error","length","hashedPassword","create","token","generateAuthToken","id","findOne","isAuthenticated","e","deletedAt","profile","encodedToken","replace","verifiedToken","decodeAuthToken","findById"],"mappings":"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","sourcesContent":["import { compare, hash } from 'bcryptjs';\nimport { unauthorized } from 'boom';\nimport { sign, verify } from 'jsonwebtoken';\n\nimport { User } from '@modules/user/user.model';\nimport authConfig from '@config/authConfig';\n\nimport { testPasswordStrength } from './auth.utils';\n\ninterface Token {\n  id: string;\n}\n\nexport default class AuthController {\n  /**\n   * Generate JWT auth token.\n   */\n  public static generateAuthToken = (user: any) =>\n    sign(user, authConfig.jwtSecret);\n\n  /**\n   * Register a new user.\n   */\n  public static signUp = async ({ email, name, password }: any) => {\n    const userByEmail = await User.find({ email });\n    const { error } = testPasswordStrength(password);\n\n    if (error) {\n      throw new Error(error);\n    }\n\n    if (userByEmail.length > 0) {\n      return unauthorized(`Email address ${email} already registered`);\n    }\n\n    const hashedPassword = await hash(password, 10);\n    const user: any = await User.create({\n      email,\n      password: hashedPassword,\n      name,\n    });\n\n    const token = AuthController.generateAuthToken({ id: user.id });\n    return { token, user: user ? user : null };\n  };\n\n  /**\n   * Authenticate user with password.\n   */\n  public static signIn = async ({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }) => {\n    const user: any = await User.findOne({ email });\n    let isAuthenticated = false;\n\n    // Verify password\n    try {\n      if (user) {\n        isAuthenticated = await compare(password, user.password);\n      }\n    } catch (e) {\n      isAuthenticated = false;\n    }\n\n    if (!user || !isAuthenticated) {\n      return unauthorized('Email or password is invalid');\n    }\n\n    if (user && user.deletedAt) {\n      return unauthorized('Account has been deleted.');\n    }\n\n    if (!user.profile) {\n      user.profile = {};\n    }\n\n    const token = AuthController.generateAuthToken({ id: user.id });\n    return { token, user };\n  };\n\n  /**\n   * Decode authentication token.\n   */\n  public static decodeAuthToken = (encodedToken?: string) => {\n    if (encodedToken) {\n      const token = encodedToken.replace('Bearer ', '');\n      const verifiedToken = verify(token, authConfig.jwtSecret) as Token;\n      return verifiedToken;\n    }\n  };\n\n  /**\n   * Get user by authentication token.\n   */\n  public static getUserByAuthToken = async (encodedToken?: string) => {\n    const token = AuthController.decodeAuthToken(encodedToken);\n\n    if (token) {\n      return await User.findById(token.id);\n    }\n\n    return null;\n  };\n}\n"],"file":"auth.controller.js"}