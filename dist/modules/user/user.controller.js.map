{"version":3,"sources":["../../../src/modules/user/user.controller.ts"],"names":["UserController","ctx","user","_id","dataToUpdate","User","findByIdAndUpdate","$set","new","email","currentPassword","newPassword","findOne","newPasswordHashed","error","isPasswordRight","password","Error","id"],"mappings":";;;;;;;AAAA;;AACA;;AAGA;;AAEA;;;;;;;;AAEe,MAAMA,cAAN,CAAqB;;;;gBAAfA,c,aAIK,MAAOC,GAAP,IAAwBA,GAAG,CAACC,I;;gBAJjCF,c,gBASQ,gBAGA;AAAA,MAHO;AAChCG,IAAAA;AADgC,GAGP;AAAA,MADtBC,YACsB;;AACzB,QAAMF,IAAI,GAAG,MAAMG,WAAKC,iBAAL,CACjBH,GADiB,EAEjB;AACEI,IAAAA,IAAI,EAAEH;AADR,GAFiB,EAKjB;AAAEI,IAAAA,GAAG,EAAE;AAAP,GALiB,CAAnB;AAQA,SAAON,IAAP;AACD,C;;gBAtBkBF,c,wBA2BgB,OAAO;AACxCS,EAAAA,KADwC;AAExCC,EAAAA,eAFwC;AAGxCC,EAAAA;AAHwC,CAAP,KAIR;AACzB,QAAMT,IAAI,GAAG,MAAMG,WAAKO,OAAL,CAAa;AAAEH,IAAAA;AAAF,GAAb,CAAnB;AACA,QAAMI,iBAAiB,GAAG,MAAM,oBAAKF,WAAL,EAAkB,EAAlB,CAAhC;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAY,gCAAqBH,WAArB,CAAlB;AAEA,MAAII,eAAe,GAAG,IAAtB;;AAEA,MAAI;AACF,QAAIb,IAAJ,EAAU;AACRa,MAAAA,eAAe,GAAG,MAAM,uBAAQL,eAAR,EAAyBR,IAAI,CAACc,QAA9B,CAAxB;AACD;AACF,GAJD,CAIE,MAAM;AACND,IAAAA,eAAe,GAAG,KAAlB;AACD;;AAED,MAAID,KAAJ,EAAW;AACT,UAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;AACD;;AAED,MAAI,CAACZ,IAAD,IAAS,CAACa,eAAd,EAA+B;AAC7B,WAAO,wBAAa,oCAAb,CAAP;AACD;;AAED,QAAMV,WAAKC,iBAAL,CACJJ,IAAI,CAACgB,EADD,EAEJ;AACEX,IAAAA,IAAI,EAAE;AAAES,MAAAA,QAAQ,EAAEH;AAAZ;AADR,GAFI,EAKJ;AAAEL,IAAAA,GAAG,EAAE;AAAP,GALI,CAAN;AAQA,SAAO;AAAEN,IAAAA;AAAF,GAAP;AACD,C","sourcesContent":["import { unauthorized } from 'boom';\nimport { compare, hash } from 'bcryptjs';\n\nimport { Context } from '@types';\nimport { testPasswordStrength } from '@modules/auth/auth.utils';\n\nimport { User } from './user.model';\n\nexport default class UserController {\n  /**\n   * Get user profile.\n   */\n  public static fetchMe = async (ctx: Context) => ctx.user;\n\n  /**\n   * Update user.\n   */\n  public static updateUser = async ({\n    _id,\n    ...dataToUpdate\n  }: Record<string, any>) => {\n    const user = await User.findByIdAndUpdate(\n      _id,\n      {\n        $set: dataToUpdate,\n      },\n      { new: true },\n    );\n\n    return user;\n  };\n\n  /**\n   * Update user password.\n   */\n  public static updateUserPassword = async ({\n    email,\n    currentPassword,\n    newPassword,\n  }: Record<string, any>) => {\n    const user = await User.findOne({ email });\n    const newPasswordHashed = await hash(newPassword, 10);\n    const { error } = testPasswordStrength(newPassword);\n\n    let isPasswordRight = null;\n\n    try {\n      if (user) {\n        isPasswordRight = await compare(currentPassword, user.password);\n      }\n    } catch {\n      isPasswordRight = false;\n    }\n\n    if (error) {\n      throw new Error(error);\n    }\n\n    if (!user || !isPasswordRight) {\n      return unauthorized('Your current password is incorrect');\n    }\n\n    await User.findByIdAndUpdate(\n      user.id,\n      {\n        $set: { password: newPasswordHashed },\n      },\n      { new: true },\n    );\n\n    return { user };\n  };\n}\n"],"file":"user.controller.js"}